// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  Session       Session[]
  Account       Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id           String    @id
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verification")
}

enum OrderStatus {
  REJECTED
  PENDING
  READY
  DELIVERED
  NOT_PAID
  COMPLETED
}

enum UnitOfMeasure {
  Gram
  Milliliter
  Ounce
  Teaspoon
  Tablespoon
  Cup
  Pinch
  Dash
  Whole
  Slice
  Leaf
  Clove
  Head
  Bunch
}

model Order {
  id               Int            @id @default(autoincrement())
  status           OrderStatus    @default(PENDING)
  createdAt        DateTime       @default(now())
  customerFullName String
  customerContact  String
  items            OrderItem[]
  payment          OrderPayment[]

  @@map("order")
}

model PaymentMethod {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  OrderPayment OrderPayment[]

  @@map("payment_method")
}

model Item {
  id              Int              @id @default(autoincrement())
  name            String
  description     String
  basePrice       Float
  image           String
  preparationTime Int
  ingredients     ItemIngredient[]
  orderItems      OrderItem[]

  @@map("item")
}

model Ingredient {
  id                             Int                             @id @default(autoincrement())
  name                           String
  quantity                       Float
  additionalPrice                Float                           @default(0)
  additionalQuantity             Float                           @default(0)
  unit                           UnitOfMeasure
  itemIngredients                ItemIngredient[]
  orderItemAdditionalIngredients OrderItemAdditionalIngredient[]

  @@map("ingredient")
}

model OrderItem {
  id                    Int                             @id @default(autoincrement())
  order                 Order                           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId               Int
  item                  Item                            @relation(fields: [itemId], references: [id])
  itemId                Int
  quantity              Int
  additionalIngredients OrderItemAdditionalIngredient[]

  @@map("order_item")
}

model OrderPayment {
  id              Int           @id @default(autoincrement())
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId Int
  order           Order         @relation(fields: [orderId], references: [id])
  orderId         Int
  reference       String

  @@map("order_payment")
}

model ItemIngredient {
  id                 Int        @id @default(autoincrement())
  item               Item       @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId             Int
  ingredient         Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId       Int
  ingredientQuantity Float

  @@map("item_ingredient")
}

model OrderItemAdditionalIngredient {
  id           Int        @id @default(autoincrement())
  orderItem    OrderItem  @relation(fields: [orderItemId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  orderItemId  Int
  ingredientId Int

  @@map("order_item_additional_ingredient")
}
